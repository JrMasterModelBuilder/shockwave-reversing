//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: DIR.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2022 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.2
//   Purpose: Parse Shockwave compressed files.
//  Category: Shockwave
// File Mask: *.dcr, *.cct
//  ID Bytes: 58 46 49 52, 52 49 46 58
//   History:
//       1.2: Use official veriable names
//       1.1: Parse the intro chunks
//       1.0: Initial release
//------------------------------------------------

typedef union {
	uint i <format=hex>;
	char c[4];
} FOURCC <bgcolor=cGreen>;

enum <uint> TAGS {
	TAGS_FVER = 0x46766572,
	TAGS_FCDR = 0x46636472,
	TAGS_ABMP = 0x41424D50,
	TAGS_FGEI = 0x46474549
};

typedef struct {
	local uint i = 0;
	while (ReadUByte(FTell() + i++) >> 7);
	byte data[i];
} VINT <
	optimize=false,
	bgcolor=cAqua,
	read=readVINT,
	comment="AKA: Compressed Number"
>;

uint valueVINT(VINT &vint) {
	local uint n = 0;
	local uint i = 0;
	local ubyte b;
	do {
		b = vint.data[i++];
		n = (n << 7) | (b & 0b1111111);
	} while (b >> 7);
	return n;
}

string readVINT(VINT &vint) {
	string r;
	SPrintf(r, "%u\n", valueVINT(vint));
	return r;
}

typedef struct {
	FOURCC tag <comment="Tag ID">;
	VINT size <comment="Body size">;
	local uint n = valueVINT(size);
	if (n) {
		byte data[n] <bgcolor=cGray, comment="Chunk data">;
	}
} INTRO_CHUNK <optimize=false, comment="Intro chunk">;

typedef struct {
	FOURCC tag <comment="Tag ID">;
	VINT size <comment="Body size">;
	local uint end = FTell() + valueVINT(size);
	VINT fverVersion <comment="Format version of Fver">;

	if (valueVINT(fverVersion) > 0x400) {
		VINT imapVersion <comment="Format version from imap">;
		VINT fileVersion <comment="Director version from imap">;
	}

	if (valueVINT(fverVersion) >= 0x501) {
		ubyte versionStringLengh <
			bgcolor=cLtBlue,
			comment="Length of version string"
		>;
		char versionString[versionStringLengh] <
			bgcolor=cWhite,
			comment="Version string"
		>;
	}

	if (FTell() < end) {
		byte data[end - FTell()] <
			bgcolor=cDkRed,
			comment="Unexpected data"
		>;
	}
} INTRO_CHUNK_FVER <optimize=false, comment="Intro chunk: Fver">;

typedef struct {
	FOURCC tag <comment="Tag ID">;
	VINT size <comment="Body size">;
	local uint n = valueVINT(size);
	if (n) {
		byte data[n] <bgcolor=cGray, comment="LZ77 compressed data">;
	}
} INTRO_CHUNK_FCDR <optimize=false, comment="Intro chunk: Fcdr">;

typedef struct {
	FOURCC tag <comment="Tag ID">;
	VINT size <comment="Body size">;
	local uint end = FTell() + valueVINT(size);
	VINT compressor <comment="Fcdr compressor index">;
	VINT decompressedSize <comment="LZ77 decompressed size">;
	byte compressedData[end - FTell()] <
		bgcolor=cGray,
		comment="LZ77 compressed data"
	>;
} INTRO_CHUNK_ABMP <optimize=false, comment="Intro chunk: ABMP">;

typedef struct {
	FOURCC tag <comment="Tag ID">;
	VINT size <comment="Body size">;
	local uint n = valueVINT(size);
	if (n) {
		byte data[n] <bgcolor=cDkRed, comment="Unexpected data">;
	}
} INTRO_CHUNK_FGEI <optimize=false, comment="Intro chunk: GFEI">;

typedef struct {
	FOURCC magic <comment="Header magic">;
	uint size <bgcolor=cDkBlue, comment="Body size">;
	local int64 eof = FTell() + size;
	FOURCC type <comment="File type">;

	while (1) {
		if (ReadUInt() == TAGS_FVER) {
			INTRO_CHUNK_FVER fver;
			break;
		}
		INTRO_CHUNK unknown;
	}

	while (1) {
		if (ReadUInt() == TAGS_FCDR) {
			INTRO_CHUNK_FCDR fcdr;
			break;
		}
		INTRO_CHUNK unknown;
	}

	while (1) {
		if (ReadUInt() == TAGS_ABMP) {
			INTRO_CHUNK_ABMP abmp;
			break;
		}
		INTRO_CHUNK unknown;
	}

	while (1) {
		if (ReadUInt() == TAGS_FGEI) {
			INTRO_CHUNK_FGEI fgei;
			break;
		}
		INTRO_CHUNK unknown;
	}

	if (FTell() < eof) {
		byte data[eof - FTell()] <
			bgcolor=cBlack,
			comment="Appended data for chunks"
		>;
	}
} DCR <optimize=false, open=true, comment="DCR">;

switch (ReadUInt()) {
	case 0x58464952: {
		BigEndian();
		DCR dcr;
		break;
	}
	case 0x52494658: {
		LittleEndian();
		DCR dcr;
		break;
	}
	default: {
		Warning("Unknown magic: %08x", ReadUInt());
		return -1;
	}
}
